// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/dog/dog.proto

package dog

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DogService_GetDog_FullMethodName    = "/dog.DogService/GetDog"
	DogService_ListDogs_FullMethodName  = "/dog.DogService/ListDogs"
	DogService_CreateDog_FullMethodName = "/dog.DogService/CreateDog"
)

// DogServiceClient is the client API for DogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DogServiceClient interface {
	GetDog(ctx context.Context, in *GetDogRequest, opts ...grpc.CallOption) (*GetDogResponse, error)
	ListDogs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListDogsResponse, error)
	CreateDog(ctx context.Context, in *CreateDogRequest, opts ...grpc.CallOption) (*CreateDogResponse, error)
}

type dogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDogServiceClient(cc grpc.ClientConnInterface) DogServiceClient {
	return &dogServiceClient{cc}
}

func (c *dogServiceClient) GetDog(ctx context.Context, in *GetDogRequest, opts ...grpc.CallOption) (*GetDogResponse, error) {
	out := new(GetDogResponse)
	err := c.cc.Invoke(ctx, DogService_GetDog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dogServiceClient) ListDogs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListDogsResponse, error) {
	out := new(ListDogsResponse)
	err := c.cc.Invoke(ctx, DogService_ListDogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dogServiceClient) CreateDog(ctx context.Context, in *CreateDogRequest, opts ...grpc.CallOption) (*CreateDogResponse, error) {
	out := new(CreateDogResponse)
	err := c.cc.Invoke(ctx, DogService_CreateDog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DogServiceServer is the server API for DogService service.
// All implementations must embed UnimplementedDogServiceServer
// for forward compatibility
type DogServiceServer interface {
	GetDog(context.Context, *GetDogRequest) (*GetDogResponse, error)
	ListDogs(context.Context, *empty.Empty) (*ListDogsResponse, error)
	CreateDog(context.Context, *CreateDogRequest) (*CreateDogResponse, error)
	mustEmbedUnimplementedDogServiceServer()
}

// UnimplementedDogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDogServiceServer struct {
}

func (UnimplementedDogServiceServer) GetDog(context.Context, *GetDogRequest) (*GetDogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDog not implemented")
}
func (UnimplementedDogServiceServer) ListDogs(context.Context, *empty.Empty) (*ListDogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDogs not implemented")
}
func (UnimplementedDogServiceServer) CreateDog(context.Context, *CreateDogRequest) (*CreateDogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDog not implemented")
}
func (UnimplementedDogServiceServer) mustEmbedUnimplementedDogServiceServer() {}

// UnsafeDogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DogServiceServer will
// result in compilation errors.
type UnsafeDogServiceServer interface {
	mustEmbedUnimplementedDogServiceServer()
}

func RegisterDogServiceServer(s grpc.ServiceRegistrar, srv DogServiceServer) {
	s.RegisterService(&DogService_ServiceDesc, srv)
}

func _DogService_GetDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogServiceServer).GetDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DogService_GetDog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogServiceServer).GetDog(ctx, req.(*GetDogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DogService_ListDogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogServiceServer).ListDogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DogService_ListDogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogServiceServer).ListDogs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DogService_CreateDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogServiceServer).CreateDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DogService_CreateDog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogServiceServer).CreateDog(ctx, req.(*CreateDogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DogService_ServiceDesc is the grpc.ServiceDesc for DogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dog.DogService",
	HandlerType: (*DogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDog",
			Handler:    _DogService_GetDog_Handler,
		},
		{
			MethodName: "ListDogs",
			Handler:    _DogService_ListDogs_Handler,
		},
		{
			MethodName: "CreateDog",
			Handler:    _DogService_CreateDog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dog/dog.proto",
}
